# Code generated by font_to_py.py.
# Font: Amatic-Bold.ttf Char set:  %.0123456789Cmp°
# Cmd: font-to-py.py -c 0123456789. %pm°C Amatic-Bold.ttf 32 amatic32bs.py
version = '0.33'

def height():
    return 32

def baseline():
    return 30

def max_width():
    return 20

def hmap():
    return False

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 176

_font =\
b'\x09\x00\x00\x00\x00\x00\x78\x00\x00\x00\xfe\x00\x00\x20\x06\x00'\
b'\xfc\x33\x06\xf0\xff\x33\xfc\xff\x00\x00\xf8\x07\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\xf0\x3f'\
b'\x00\x00\xfc\xff\x00\x00\x0e\xc0\x01\x00\x06\x80\x01\x00\x0e\xc0'\
b'\x01\x00\xfc\xff\x01\x3e\xf0\x7f\xe0\x3f\x00\x00\xfe\x0f\x00\xe0'\
b'\x7f\x00\x00\xfe\x07\x00\xc0\x7f\x00\x00\xfc\x07\xfc\x07\x7e\x00'\
b'\xff\x1f\x00\x80\x03\x38\x00\x80\x01\x30\x00\x80\x03\x38\x00\x00'\
b'\xff\x1f\x00\x00\xfe\x0f\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x60'\
b'\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\xf8\xff\x3f\x00\xfe\xff\xff\x07\x02\x00'\
b'\xc0\x1f\x02\x00\x00\x38\x0e\x00\x00\x30\x3c\x00\x00\x38\xf0\x1f'\
b'\x80\x1f\x80\xff\xff\x0f\x00\x00\x10\x00\x00\x00\x00\x00\x09\x00'\
b'\x06\x00\x00\x00\x06\x00\x00\x00\x06\x00\x00\x30\xfe\xff\x03\x30'\
b'\xe0\xff\xff\x3f\x00\x00\xe0\x3f\x00\x00\x00\x30\x00\x00\x00\x30'\
b'\x00\x00\x00\x10\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x30\x18\x00'\
b'\x00\x3e\x3c\x00\x80\x37\x0e\x00\xf0\x31\x06\x00\x3c\x30\x0e\xc0'\
b'\x0f\x30\xfc\xff\x01\x30\xf0\x0f\x00\x00\x00\x00\x00\x00\x09\x00'\
b'\x18\x00\x00\x00\x1c\x00\x00\x00\x0e\x00\x00\x18\x06\x30\x00\x30'\
b'\x0e\x38\x00\x30\xfc\xff\x00\x30\xf0\xc7\x07\x3c\x00\x80\xff\x1f'\
b'\x00\x00\xf0\x03\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\xff'\
b'\x1f\x00\xfc\xff\x1f\x00\x00\x00\x18\x00\x00\xff\xff\x37\x00\xff'\
b'\xff\x7f\x00\x00\x18\x00\x00\x00\x18\x00\x00\x00\x00\x00\x08\x00'\
b'\x7e\x08\x00\x00\xfe\x3f\x00\x00\x06\x38\x00\x60\x06\x30\x00\x60'\
b'\x06\x70\x00\x60\x00\xe0\x01\x30\x00\xc0\xff\x1f\x00\x00\xfe\x0f'\
b'\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\xff\xff\x03\xf8\xff'\
b'\xff\x0f\x1e\x30\x00\x3c\x06\x60\x00\x30\x02\xe0\x07\x30\x00\x80'\
b'\xff\x3f\x00\x00\xf0\x0f\x00\x00\x00\x00\x09\x00\x00\x00\x00\x00'\
b'\x06\x00\x00\x10\x06\x00\x00\x3e\x06\x00\xe0\x1f\x06\x80\xff\x00'\
b'\xfe\xff\x03\x00\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x0a\x00\x00\x00\x00\x00\x3c\x00\x00\x00\xff\x01\xe0\x1f\x83\x0f'\
b'\xff\x3f\x03\xf8\x01\x60\xfe\xff\x03\x60\xfc\x03\x3f\x70\x00\x00'\
b'\xf8\x3f\x00\x00\x00\x0f\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\xf8\x07\x00\x00\xfc\x0f\x00\x00\x0e\x18\x00\x00'\
b'\x06\x30\x00\x00\x06\x30\x00\x7c\xfe\xff\xff\x7f\xf8\x07\x00\x00'\
b'\x00\x00\x00\x00\x09\x00\x00\x00\x00\x00\x78\x00\x00\x00\xfe\x00'\
b'\x00\x20\x06\x00\xfc\x33\x06\xf0\xff\x33\xfc\xff\x00\x00\xf8\x07'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00'\
b'\xf0\xff\xff\x00\xf8\xff\xff\x0f\x1c\x00\x00\x1f\x0e\x00\x00\x38'\
b'\x06\x00\x00\x70\x06\x00\x00\x60\x06\x00\x00\x60\x06\x00\x00\x60'\
b'\x04\x00\x00\x70\x00\x00\x00\x30\x00\x00\x00\x00\x13\x00\x00\x00'\
b'\x00\x00\x00\x00\xf0\x7f\xe0\xff\xff\x7f\xe0\xff\x3f\x00\xc0\x0f'\
b'\x00\x00\x00\x7e\x00\x00\x00\xf0\x07\x00\x00\x80\xff\x00\x00\x00'\
b'\xf8\x0f\x00\x00\xc0\x0f\x00\x00\xf0\x07\x00\x00\xff\x00\x00\xf0'\
b'\x0f\x00\x00\xff\x00\x00\xc0\x0f\x00\x00\xe0\xff\xff\x7f\xe0\xff'\
b'\xff\xff\x00\x00\x00\x60\x00\x00\x00\x00\x09\x00\x00\x00\x00\x00'\
b'\xc0\x80\xff\x1f\xe0\xff\xff\x7f\x60\xc0\xff\x7f\x60\x00\x03\x00'\
b'\xe0\xc0\x03\x00\xc0\xff\x01\x00\x00\x7f\x00\x00\x00\x00\x00\x00'\
b'\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x0f\x00\x00\xe0'\
b'\x1c\x00\x00\x70\x38\x00\x00\x30\x30\x00\x00\x30\x30\x00\x00\x30'\
b'\x30\x00\x00\x30\x30\x00\x00\x60\x18\x00\x00\xc0\x0f\x00\x00\x80'\
b'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00'

_sparse =\
b'\x20\x00\x26\x00\x25\x00\x38\x00\x2e\x00\x8a\x00\x30\x00\xac\x00'\
b'\x31\x00\xde\x00\x32\x00\x04\x01\x33\x00\x2e\x01\x34\x00\x54\x01'\
b'\x35\x00\x7e\x01\x36\x00\xa0\x01\x37\x00\xca\x01\x38\x00\xf0\x01'\
b'\x39\x00\x1a\x02\x3f\x00\x44\x02\x43\x00\x6a\x02\x6d\x00\x9c\x02'\
b'\x70\x00\xea\x02\xb0\x00\x10\x03'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch))
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((32 - 1)//8 + 1) * width
    return _mvfont[doff + 2:next_offs], 32, width
 
